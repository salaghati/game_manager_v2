import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import './AdvancePaymentPage.css';
import API_CONFIG from '../config/api';

const AdvancePaymentPage = () => {
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState('summary');
  const [users, setUsers] = useState([]);
  const [transactions, setTransactions] = useState([]);
  const [summary, setSummary] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Form states
  const [advanceForm, setAdvanceForm] = useState({
    user_id: '',
    amount: '',
    description: '',
    transaction_date: new Date().toISOString().split('T')[0]
  });

  const [paymentForm, setPaymentForm] = useState({
    user_id: '',
    amount: '',
    description: '',
    transaction_date: new Date().toISOString().split('T')[0]
  });

  const [selectedUser, setSelectedUser] = useState('');
  const [selectedType, setSelectedType] = useState('');

  // L·∫•y token t·ª´ localStorage v√† memoize headers
  const token = localStorage.getItem('token');
  const headers = useMemo(() => ({
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }), [token]);

  // Fetch users
  const fetchUsers = useCallback(async () => {
    try {
      const response = await fetch(`${API_CONFIG.BASE_URL}/api/users`, { headers });
      const data = await response.json();
      if (response.ok) {
        setUsers(data);
      } else {
        if (response.status === 401) {
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          navigate('/login');
        } else {
          setError(data.message || 'L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n');
        }
      }
    } catch (err) {
      setError('L·ªói k·∫øt n·ªëi khi t·∫£i danh s√°ch nh√¢n vi√™n');
    }
  }, [headers, navigate]);

  // Fetch transactions
  const fetchTransactions = useCallback(async () => {
    try {
      setLoading(true);
      let url = `${API_CONFIG.BASE_URL}/api/advance-transactions?limit=100`;
      if (selectedUser) url += `&user_id=${selectedUser}`;
      if (selectedType) url += `&type=${selectedType}`;

      const response = await fetch(url, { headers });
      const data = await response.json();
      if (response.ok) {
        setTransactions(data);
      } else {
        if (response.status === 401) {
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          navigate('/login');
        } else {
          setError(data.message || 'L·ªói khi t·∫£i danh s√°ch giao d·ªãch');
        }
      }
    } catch (err) {
      setError('L·ªói k·∫øt n·ªëi khi t·∫£i danh s√°ch giao d·ªãch');
    } finally {
      setLoading(false);
    }
  }, [headers, navigate, selectedUser, selectedType]);

  // Fetch summary
  const fetchSummary = useCallback(async () => {
    try {
      setLoading(true);
      let url = `${API_CONFIG.BASE_URL}/api/advance-transactions/summary`;
      if (selectedUser) url += `?user_id=${selectedUser}`;

      const response = await fetch(url, { headers });
      const data = await response.json();
      if (response.ok) {
        setSummary(data);
      } else {
        if (response.status === 401) {
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          navigate('/login');
        } else {
          setError(data.message || 'L·ªói khi t·∫£i t·ªïng h·ª£p c√¥ng n·ª£');
        }
      }
    } catch (err) {
      setError('L·ªói k·∫øt n·ªëi khi t·∫£i t·ªïng h·ª£p c√¥ng n·ª£');
    } finally {
      setLoading(false);
    }
  }, [headers, navigate, selectedUser]);

  // Create advance
  const createAdvance = async () => {
    try {
      if (!advanceForm.user_id || !advanceForm.amount || !advanceForm.transaction_date) {
        setError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
        return;
      }

      const response = await fetch(`${API_CONFIG.BASE_URL}/api/advance-transactions`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          user_id: parseInt(advanceForm.user_id),
          amount: parseInt(advanceForm.amount),
          description: advanceForm.description,
          transaction_date: advanceForm.transaction_date
        })
      });

      const data = await response.json();
      if (response.ok) {
        setAdvanceForm({
          user_id: '',
          amount: '',
          description: '',
          transaction_date: new Date().toISOString().split('T')[0]
        });
        fetchTransactions();
        fetchSummary();
        setError('');
        alert('T·∫°o t·∫°m ·ª©ng th√†nh c√¥ng!');
      } else {
        setError(data.message || 'L·ªói khi t·∫°o t·∫°m ·ª©ng');
      }
    } catch (err) {
      setError('L·ªói k·∫øt n·ªëi khi t·∫°o t·∫°m ·ª©ng');
    }
  };

  // Create payment (thanh to√°n tr·ª±c ti·∫øp v√†o n·ª£ t·ªïng)
  const createPayment = async () => {
    try {
      if (!paymentForm.user_id || !paymentForm.amount || !paymentForm.transaction_date) {
        setError('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin');
        return;
      }

      const response = await fetch(`${API_CONFIG.BASE_URL}/api/advance-transactions/direct-payment`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          user_id: parseInt(paymentForm.user_id),
          amount: parseInt(paymentForm.amount),
          description: paymentForm.description,
          transaction_date: paymentForm.transaction_date
        })
      });

      const data = await response.json();
      if (response.ok) {
        setPaymentForm({
          user_id: '',
          amount: '',
          description: '',
          transaction_date: new Date().toISOString().split('T')[0]
        });
        fetchTransactions();
        fetchSummary();
        setError('');
        alert('Thanh to√°n th√†nh c√¥ng! S·ªë n·ª£ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.');
      } else {
        setError(data.message || 'L·ªói khi t·∫°o thanh to√°n');
      }
    } catch (err) {
      setError('L·ªói k·∫øt n·ªëi khi t·∫°o thanh to√°n');
    }
  };

  // Reset all advance transaction data
  const handleResetData = async () => {
    if (!window.confirm('‚ö†Ô∏è B·∫†N C√ì CH·∫ÆC MU·ªêN X√ìA TO√ÄN B·ªò D·ªÆ LI·ªÜU T·∫†M ·ª®NG/THANH TO√ÅN?\n\nH√†nh ƒë·ªông n√†y KH√îNG TH·ªÇ HO√ÄN T√ÅC!')) {
      return;
    }

    if (!window.confirm('üî¥ X√ÅC NH·∫¨N L·∫¶N CU·ªêI: T·∫•t c·∫£ d·ªØ li·ªáu t·∫°m ·ª©ng v√† thanh to√°n s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn!')) {
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`${API_CONFIG.BASE_URL}/api/advance-transactions/reset`, {
        method: 'DELETE',
        headers
      });

      const data = await response.json();
      if (response.ok) {
        // Refresh all data
        fetchTransactions();
        fetchSummary();
        setError('');
        alert('‚úÖ Reset d·ªØ li·ªáu th√†nh c√¥ng! ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu t·∫°m ·ª©ng/thanh to√°n.');
      } else {
        if (response.status === 403) {
          setError('‚ùå Ch·ªâ admin m·ªõi c√≥ quy·ªÅn reset d·ªØ li·ªáu');
        } else if (response.status === 401) {
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          navigate('/login');
        } else {
          setError(data.message || 'L·ªói khi reset d·ªØ li·ªáu');
        }
      }
    } catch (err) {
      setError('L·ªói k·∫øt n·ªëi khi reset d·ªØ li·ªáu');
    } finally {
      setLoading(false);
    }
  };

  // Load data when component mounts
  useEffect(() => {
    fetchUsers();
    fetchTransactions();
    fetchSummary();
  }, [fetchUsers, fetchTransactions, fetchSummary]);

  // Update data when filters change
  useEffect(() => {
    if (activeTab === 'transactions') {
      fetchTransactions();
    } else if (activeTab === 'summary') {
      fetchSummary();
    }
  }, [selectedUser, selectedType, activeTab, fetchTransactions, fetchSummary]);

  // Format currency
  const formatCurrency = (amount) => {
    return amount.toLocaleString('vi-VN') + ' VND';
  };

  // Format date
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  // Get users with debt for quick selection
  const getUsersWithDebt = () => {
    return users.filter(user => 
      !selectedUser || user.id === parseInt(selectedUser)
    );
  };

  return (
    <div className="advance-payment-page">
      <div className="page-header">
        <div className="header-with-back">
          <button onClick={() => navigate('/')} className="back-button">
            ‚Üê Quay l·∫°i
          </button>
          <div className="header-content">
            <h1>Qu·∫£n l√Ω t·∫°m ·ª©ng/thanh to√°n</h1>
            <p>Qu·∫£n l√Ω vi·ªác t·∫°m ·ª©ng v√† thanh to√°n ti·ªÅn cho nh√¢n vi√™n</p>
          </div>
        </div>
      </div>

      {error && <div className="error-message">{error}</div>}

      <div className="tabs">
        <button 
          className={activeTab === 'summary' ? 'active' : ''}
          onClick={() => setActiveTab('summary')}
        >
          T·ªïng h·ª£p c√¥ng n·ª£
        </button>
        <button 
          className={activeTab === 'transactions' ? 'active' : ''}
          onClick={() => setActiveTab('transactions')}
        >
          Danh s√°ch giao d·ªãch
        </button>
        <button 
          className={activeTab === 'advance' ? 'active' : ''}
          onClick={() => setActiveTab('advance')}
        >
          T·∫°o t·∫°m ·ª©ng
        </button>
        <button 
          className={activeTab === 'payment' ? 'active' : ''}
          onClick={() => setActiveTab('payment')}
        >
          Thanh to√°n n·ª£
        </button>
      </div>

      <div className="tab-content">
        {activeTab === 'summary' && (
          <div className="summary-tab">
            <div className="filters">
              <select 
                value={selectedUser} 
                onChange={(e) => setSelectedUser(e.target.value)}
              >
                <option value="">T·∫•t c·∫£ nh√¢n vi√™n</option>
                {users.map(user => (
                  <option key={user.id} value={user.id}>
                    {user.full_name} ({user.username})
                  </option>
                ))}
              </select>
            </div>

            {loading ? (
              <div className="loading">ƒêang t·∫£i...</div>
            ) : (
              <div className="summary-list">
                {summary.length === 0 ? (
                  <div className="no-data">Kh√¥ng c√≥ c√¥ng n·ª£ n√†o</div>
                ) : (
                  summary.map((item, index) => (
                    <div key={index} className="summary-item">
                      <div className="summary-header">
                        <h3>{item.user.full_name}</h3>
                        <div className={`debt-amount ${item.total_balance < 0 ? 'owner-owes' : ''}`}>
                          {item.total_balance >= 0 
                            ? `S·ªë n·ª£ hi·ªán t·∫°i: ${formatCurrency(item.total_balance)}`
                            : `S·ªë d∆∞ th·ª´a: ${formatCurrency(Math.abs(item.total_balance))}`
                          }
                        </div>
                      </div>
                      <div className="summary-details">
                        <p>T√†i kho·∫£n: {item.user.username}</p>
                        <p>Chi nh√°nh: {item.branch.name}</p>
                        <div className="debt-explanation">
                          <p><small>
                            ‚Ä¢ S·ªë d∆∞∆°ng = Nh√¢n vi√™n ƒëang n·ª£<br/>
                            ‚Ä¢ S·ªë √¢m = Nh√¢n vi√™n ƒë√£ tr·∫£ th·ª´a ti·ªÅn
                          </small></p>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            )}
          </div>
        )}

        {activeTab === 'transactions' && (
          <div className="transactions-tab">
            <div className="filters">
              <select 
                value={selectedUser} 
                onChange={(e) => setSelectedUser(e.target.value)}
              >
                <option value="">T·∫•t c·∫£ nh√¢n vi√™n</option>
                {users.map(user => (
                  <option key={user.id} value={user.id}>
                    {user.full_name} ({user.username})
                  </option>
                ))}
              </select>
              <select 
                value={selectedType} 
                onChange={(e) => setSelectedType(e.target.value)}
              >
                <option value="">T·∫•t c·∫£ lo·∫°i giao d·ªãch</option>
                <option value="ADVANCE">T·∫°m ·ª©ng</option>
                <option value="PAYMENT">Thanh to√°n</option>
              </select>
              <button 
                onClick={handleResetData}
                className="btn-danger reset-button"
                disabled={loading}
                title="X√≥a to√†n b·ªô d·ªØ li·ªáu t·∫°m ·ª©ng/thanh to√°n (ch·ªâ admin)"
                style={{
                  marginLeft: '16px',
                  padding: '8px 16px',
                  backgroundColor: '#dc3545',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: loading ? 'not-allowed' : 'pointer',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  opacity: loading ? 0.6 : 1
                }}
              >
                {loading ? 'üîÑ ƒêang x·ª≠ l√Ω...' : 'üóëÔ∏è Reset d·ªØ li·ªáu'}
              </button>
            </div>

            {loading ? (
              <div className="loading">ƒêang t·∫£i...</div>
            ) : (
              <div className="transactions-table">
                <table>
                  <thead>
                    <tr>
                      <th>Ng√†y</th>
                      <th>Nh√¢n vi√™n</th>
                      <th>Lo·∫°i</th>
                      <th>S·ªë ti·ªÅn</th>
                      <th>M√¥ t·∫£</th>
                      <th>C√≤n l·∫°i</th>
                    </tr>
                  </thead>
                  <tbody>
                    {transactions.map(transaction => (
                      <tr key={transaction.id}>
                        <td>{formatDate(transaction.transaction_date)}</td>
                        <td>{transaction.user.full_name}</td>
                        <td>
                          <span className={`transaction-type ${transaction.transaction_type.toLowerCase()}`}>
                            {transaction.transaction_type === 'ADVANCE' ? 'T·∫°m ·ª©ng' : 'Thanh to√°n'}
                          </span>
                        </td>
                        <td className={transaction.transaction_type === 'ADVANCE' ? 'advance-amount' : 'payment-amount'}>
                          {formatCurrency(transaction.amount)}
                        </td>
                        <td>{transaction.description}</td>
                        <td>
                          {transaction.transaction_type === 'ADVANCE' ? 
                            formatCurrency(transaction.remaining_amount) : 
                            '-'
                          }
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        )}

        {activeTab === 'advance' && (
          <div className="advance-tab">
            <div className="form-container">
              <h3>T·∫°o t·∫°m ·ª©ng m·ªõi</h3>
              <div className="form-group">
                <label>Nh√¢n vi√™n:</label>
                <select 
                  value={advanceForm.user_id} 
                  onChange={(e) => setAdvanceForm({...advanceForm, user_id: e.target.value})}
                >
                  <option value="">Ch·ªçn nh√¢n vi√™n</option>
                  {users.map(user => (
                    <option key={user.id} value={user.id}>
                      {user.full_name} ({user.username}) - {user.branch?.name}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label>S·ªë ti·ªÅn:</label>
                <input 
                  type="number" 
                  value={advanceForm.amount}
                  onChange={(e) => setAdvanceForm({...advanceForm, amount: e.target.value})}
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn (VND)"
                />
              </div>
              <div className="form-group">
                <label>M√¥ t·∫£:</label>
                <input 
                  type="text" 
                  value={advanceForm.description}
                  onChange={(e) => setAdvanceForm({...advanceForm, description: e.target.value})}
                  placeholder="M√¥ t·∫£ l√Ω do t·∫°m ·ª©ng"
                />
              </div>
              <div className="form-group">
                <label>Ng√†y t·∫°m ·ª©ng:</label>
                <input 
                  type="date" 
                  value={advanceForm.transaction_date}
                  onChange={(e) => setAdvanceForm({...advanceForm, transaction_date: e.target.value})}
                />
              </div>
              <button onClick={createAdvance} className="btn-primary">
                T·∫°o t·∫°m ·ª©ng
              </button>
            </div>
          </div>
        )}

        {activeTab === 'payment' && (
          <div className="payment-tab">
            <div className="form-container">
              <h3>Thanh to√°n v√†o n·ª£ t·ªïng</h3>
              <div className="form-group">
                <label>Ch·ªçn nh√¢n vi√™n:</label>
                <select 
                  value={paymentForm.user_id} 
                  onChange={(e) => setPaymentForm({...paymentForm, user_id: e.target.value})}
                >
                  <option value="">Ch·ªçn nh√¢n vi√™n</option>
                  {users.map(user => (
                    <option key={user.id} value={user.id}>
                      {user.full_name} ({user.username}) - {user.branch?.name}
                    </option>
                  ))}
                </select>
              </div>
              <div className="form-group">
                <label>S·ªë ti·ªÅn thanh to√°n:</label>
                <input 
                  type="number" 
                  value={paymentForm.amount}
                  onChange={(e) => setPaymentForm({...paymentForm, amount: e.target.value})}
                  placeholder="Nh·∫≠p s·ªë ti·ªÅn thanh to√°n (VND)"
                />
              </div>
              <div className="form-group">
                <label>M√¥ t·∫£:</label>
                <input 
                  type="text" 
                  value={paymentForm.description}
                  onChange={(e) => setPaymentForm({...paymentForm, description: e.target.value})}
                  placeholder="M√¥ t·∫£ thanh to√°n"
                />
              </div>
              <div className="form-group">
                <label>Ng√†y thanh to√°n:</label>
                <input 
                  type="date" 
                  value={paymentForm.transaction_date}
                  onChange={(e) => setPaymentForm({...paymentForm, transaction_date: e.target.value})}
                />
              </div>
              <button onClick={createPayment} className="btn-primary">
                Thanh to√°n
              </button>
              
              <div className="payment-note">
                <h4>üìù L∆∞u √Ω v·ªÅ thanh to√°n:</h4>
                <ul>
                  <li>Thanh to√°n s·∫Ω ƒë∆∞·ª£c c·ªông tr·ª±c ti·∫øp v√†o s·ªë n·ª£ t·ªïng c·ªßa nh√¢n vi√™n</li>
                  <li>Kh√¥ng c·∫ßn ch·ªçn kho·∫£n t·∫°m ·ª©ng c·ª• th·ªÉ</li>
                  <li>S·ªë n·ª£ d∆∞∆°ng = nh√¢n vi√™n ƒëang n·ª£, s·ªë √¢m = nh√¢n vi√™n ƒë√£ tr·∫£ th·ª´a</li>
                </ul>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdvancePaymentPage; 